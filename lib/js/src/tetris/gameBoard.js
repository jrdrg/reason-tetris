// Generated by BUCKLESCRIPT VERSION 1.9.3, PLEASE EDIT WITH CARE
'use strict';

var Block            = require("bs-platform/lib/js/block.js");
var Curry            = require("bs-platform/lib/js/curry.js");
var React            = require("react");
var Random           = require("bs-platform/lib/js/random.js");
var Caml_int32       = require("bs-platform/lib/js/caml_int32.js");
var Pervasives       = require("bs-platform/lib/js/pervasives.js");
var ReasonReact      = require("reason-react/lib/js/src/reasonReact.js");
var Constants$Tetris = require("./constants.js");

var seed = (parseInt(Math.random() * Number.MAX_SAFE_INTEGER));

console.log(/* tuple */[
      "Seed",
      seed
    ]);

Random.init(seed);

var boardStyle = {
  border: "1px solid black",
  height: Pervasives.string_of_int(Caml_int32.imul(Constants$Tetris.boardSize[/* height */0], Constants$Tetris.tileSize)) + "px",
  margin: "auto",
  width: Pervasives.string_of_int(Caml_int32.imul(Constants$Tetris.boardSize[/* width */1], Constants$Tetris.tileSize)) + "px"
};

function newShape() {
  var rnd = Random.$$int(3);
  if (rnd > 2 || rnd < 0) {
    return /* Square */0;
  } else {
    return rnd;
  }
}

function handleTick(state) {
  var match = state[/* activePiece */2];
  if (match) {
    return /* Update */Block.__(0, [/* record */[
                /* tick */state[/* tick */0] + 1 | 0,
                /* board */state[/* board */1],
                /* activePiece */state[/* activePiece */2]
              ]]);
  } else {
    var shape = newShape(/* () */0);
    var activePiece = /* Some */[/* record */[
        /* shape */shape,
        /* state : NoInput */0,
        /* offsetX */0,
        /* offsetY */0
      ]];
    console.log(/* tuple */[
          "Creating active shape",
          activePiece
        ]);
    return /* Update */Block.__(0, [/* record */[
                /* tick */state[/* tick */0] + 2 | 0,
                /* board */state[/* board */1],
                /* activePiece */activePiece
              ]]);
  }
}

function handleMove(direction, state) {
  console.log(/* tuple */[
        "Moving ",
        direction
      ]);
  return /* Update */Block.__(0, [state]);
}

function handleDrop(state) {
  console.log("Dropping active piece");
  var match = state[/* activePiece */2];
  if (match) {
    var activePiece = match[0];
    return /* Update */Block.__(0, [/* record */[
                /* tick */state[/* tick */0],
                /* board */state[/* board */1],
                /* activePiece : Some */[/* record */[
                    /* shape */activePiece[/* shape */0],
                    /* state : Dropping */1,
                    /* offsetX */activePiece[/* offsetX */2],
                    /* offsetY */activePiece[/* offsetY */3]
                  ]]
              ]]);
  } else {
    return /* Update */Block.__(0, [state]);
  }
}

function handleKeyUp(state) {
  console.log("Key up");
  var match = state[/* activePiece */2];
  if (match) {
    var activePiece = match[0];
    return /* Update */Block.__(0, [/* record */[
                /* tick */state[/* tick */0],
                /* board */state[/* board */1],
                /* activePiece : Some */[/* record */[
                    /* shape */activePiece[/* shape */0],
                    /* state : NoInput */0,
                    /* offsetX */activePiece[/* offsetX */2],
                    /* offsetY */activePiece[/* offsetY */3]
                  ]]
              ]]);
  } else {
    return /* Update */Block.__(0, [state]);
  }
}

var addEventListener = (
    function(event, handler) {
        window.addEventListener(event, handler);
    }
);

var removeEventListener = (
    function(event, handler) {
        window.removeEventListener(event, handler);
    }    
);

function handleKeyDown($$event) {
  console.log(/* tuple */[
        "KEYDOWN",
        $$event.keyCode
      ]);
  return /* () */0;
}

var component = ReasonReact.reducerComponent("GameBoard");

function make() {
  var newrecord = component.slice();
  newrecord[/* didMount */4] = (function (self) {
      setInterval(Curry._1(self[/* reduce */3], (function () {
                  return /* Tick */1;
                })), 1000);
      Curry._2(addEventListener, "keydown", (function ($$event) {
              var keyCode = $$event.keyCode;
              console.log(/* tuple */[
                    "Keydown",
                    keyCode
                  ]);
              return Curry._2(self[/* reduce */3], (function () {
                            var switcher = keyCode - 37 | 0;
                            if (switcher > 3 || switcher < 0) {
                              return /* NoOp */0;
                            } else {
                              switch (switcher) {
                                case 0 : 
                                    return /* Move */[/* Left */1];
                                case 1 : 
                                    return /* NoOp */0;
                                case 2 : 
                                    return /* Move */[/* Right */3];
                                case 3 : 
                                    return /* Drop */2;
                                
                              }
                            }
                          }), /* () */0);
            }));
      Curry._2(addEventListener, "keyup", (function () {
              return Curry._2(self[/* reduce */3], (function () {
                            return /* KeyUp */3;
                          }), /* () */0);
            }));
      return /* NoUpdate */0;
    });
  newrecord[/* render */9] = (function (param) {
      return React.createElement("div", {
                  style: boardStyle
                }, Pervasives.string_of_int(param[/* state */4][/* tick */0]));
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* tick */0,
              /* board : [] */0,
              /* activePiece : None */0
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (typeof action === "number") {
        var switcher = action - 1 | 0;
        if (switcher > 2 || switcher < 0) {
          return /* Update */Block.__(0, [state]);
        } else {
          switch (switcher) {
            case 0 : 
                return handleTick(state);
            case 1 : 
                return /* Update */Block.__(0, [state]);
            case 2 : 
                return handleKeyUp(state);
            
          }
        }
      } else {
        return handleMove(action[0], state);
      }
    });
  return newrecord;
}

exports.seed                = seed;
exports.boardStyle          = boardStyle;
exports.newShape            = newShape;
exports.handleTick          = handleTick;
exports.handleMove          = handleMove;
exports.handleDrop          = handleDrop;
exports.handleKeyUp         = handleKeyUp;
exports.addEventListener    = addEventListener;
exports.removeEventListener = removeEventListener;
exports.handleKeyDown       = handleKeyDown;
exports.component           = component;
exports.make                = make;
/* seed Not a pure module */
